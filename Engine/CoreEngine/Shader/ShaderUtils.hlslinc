float4 Mask_R(float InColor)
{
	return float4(InColor, 0, 0, 1);
};

float4 Mask_G(float InColor)
{
	return float4(0, InColor, 0, 1);
};

float4 Mask_B(float InColor)
{
	return float4(0, 0, InColor, 1);
};

float4 Mask_A(float InColor)
{
	return float4(0, 0, 0, InColor);
};

/**
 * 버퍼로부터 본의 변환 행렬을 가져온다.
 */
float4x4 FetchBoneTransform(uint Bone, StructuredBuffer<float4> BoneTransforms)
{
	Bone *= 4;	// 4x4 행렬이므로 4를 곱해준다.
	float4 row1 = BoneTransforms.Load(Bone + 0);	// 4x4 행렬의 첫번째 행
	float4 row2 = BoneTransforms.Load(Bone + 1);	// 4x4 행렬의 두번째 행
	float4 row3 = BoneTransforms.Load(Bone + 2);	// 4x4 행렬의 세번째 행
	float4 row4 = BoneTransforms.Load(Bone + 3);	// 4x4 행렬의 네번째 행

	float4x4 Matrix = float4x4(row1, row2, row3, row4);	// 4x4 행렬 생성
	return Matrix;
}

/**
 * @brief 텍스처를 일정 속도로 x, y축으로 이동시키는 함수 (애니메이션 효과)
 * @param InTime : 게임 시간 (Delta Time 누적)
 */
float2 Panner(float2 InUV, float2 InSpeed, float InTime)
{
	// 시간 기반으로 Speed에 따라 TexCoord 좌표를 이동시킨다.
	float2 uvOffset = InUV + InSpeed * InTime;

	// frac을 이용하여 0~1 사이의 값으로 정규화한다.
	uvOffset.x = frac(uvOffset.x);
	uvOffset.y = frac(uvOffset.y);

	return uvOffset;
};

float WorldAlignedBlend(float3 InPixelNormal, float InputBlendSharpness, float InputBlendBias)
{
	// Z 축을 기준으로 법선과의 각도를 측정
	float blendFactor = dot(InPixelNormal, float3(0, -1, 0));

	// blendFactor를 0.5로 스케일링하고 Offset을 적용
	blendFactor = blendFactor * 0.5f + 0.5f;

	blendFactor = blendFactor * InputBlendSharpness;

	// BlendSharpness와 BlendBias를 사용해 값 조정
	blendFactor = blendFactor + (InputBlendBias - (InputBlendSharpness * 0.5f));


	// 결과값을 0과 1 사이로 clamp
	return clamp(blendFactor, 0.0f, 1.0f);
}

float3 ComputePointLight(float3      InWorldPos,
						 float3      InWorldNormal,
						 FPointLight InPointLight)
{
	// 빛의 방향을 계산
	float3 lightDir           = InPointLight.Position - InWorldPos;
	float3 lightDirNormalized = normalize(InPointLight.Position - InWorldPos);

	// 빛의 거리를 계산
	float lightDistance = length(lightDir);

	if (lightDistance > InPointLight.Range)
	{
		return float3(0, 0, 0);
	}

	// 빛의 강도를 계산
	float lightIntensity = saturate(1.0f - lightDistance / InPointLight.Range) * InPointLight.Intensity;

	// 빛의 강도를 계산
	float lightFactor = saturate(dot(InWorldNormal, lightDirNormalized));


	// 빛의 강도를 계산
	float3 lightColor = InPointLight.Color * lightIntensity * lightFactor;

	return lightColor;
}

float3 ComputeSpotLight(float3     InWorldPos,
						float3     InWorldNormal,
						FSpotLight InSpotLight)
{
	// 광원으로부터 표면까지의 벡터
	float3 LightDir = normalize(InSpotLight.Position - InWorldPos);
    
	// 광원 방향과 표면 법선 간의 내적 계산 (Diffuse 조명)
	float DiffuseFactor = max(dot(InWorldNormal, LightDir), 0.0);

	// 표면이 SpotLight 조사각 내에 있는지 확인
	float SpotEffect = dot(LightDir, -normalize(InSpotLight.Direction)); // 광원 방향과 표면 방향 비교
	SpotEffect = smoothstep(cos(radians(InSpotLight.SpotAngle)), 1.0, SpotEffect); // 부드러운 경계 처리

	// 광원의 범위(Range) 기반 감쇠
	float Distance = length(InSpotLight.Position - InWorldPos);
	float RangeAttenuation = saturate(1.0 - (Distance / InSpotLight.Range)); // 선형 감쇠

	// 조명 색과 강도(Intensity) 적용
	float3 LightColor = InSpotLight.Color * InSpotLight.Intensity;

	// 최종 조명 계산
	float3 FinalLight = LightColor * DiffuseFactor * SpotEffect * RangeAttenuation;

	return FinalLight;
}

float3 ComputePBR(float3     baseColor,    // Base Color
				  float      metallic,      // Metallic
				  float      roughness,     // Roughness
				  float      specular,      // Specular
				  float      ao,            // Ambient AO
				  float3     N,            // Normal (in world space)
				  float3     V,            // View direction (normalized)
				  float3     L,            // Light direction (normalized)
				  float3     lightColor,   // Light color
				  out float3 albedo    // Output diffuse term for debugging
)
{
	const float PI = 3.14159265359;

	// Roughness 처리
	roughness   = clamp(roughness, 0.04, 1.0);
	float alpha = roughness * roughness;

	// Halfway 벡터 계산
	float3 H = normalize(V + L);

	// Fresnel 계산
	float3 F0 = lerp(float3(specular, specular, specular), baseColor, metallic);
	float3 F  = F0 + (1.0 - F0) * pow(1.0 - dot(H, V), 5.0);

	// GGX Geometry Function
	float NdotV = max(dot(N, V), 0.0);
	float NdotL = max(dot(N, L), 0.0);
	float NdotH = max(dot(N, H), 0.0);

	float G1 = NdotV / (NdotV * (1.0 - alpha) + alpha);
	float G2 = NdotL / (NdotL * (1.0 - alpha) + alpha);
	float G  = G1 * G2;

	// GGX Normal Distribution Function
	float D = alpha / (PI * pow(NdotH * NdotH * (alpha - 1.0) + 1.0, 2.0));

	// Specular BRDF
	float3 specularBRDF = (F * G * D) / (4.0 * NdotV * NdotL + 0.001);

	// Diffuse BRDF
	float3 diffuseBRDF = (1.0 - F) * baseColor * (1.0 - metallic) / PI;

	// Ambient AO 적용
	diffuseBRDF *= ao;
	specularBRDF *= ao;

	// 최종 조합
	albedo          = diffuseBRDF * NdotL;
	float3 lighting = (diffuseBRDF + specularBRDF) * NdotL * lightColor;

	return lighting;
}
